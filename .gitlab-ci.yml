image: python

variables:
  TWINE_USERNAME: SECURE
  TWINE_PASSWORD: SECURE
  TWINE_REPOSITORY_URL: https://upload.pypi.org/legacy/
  SK_DEBUG: 1

before_script:
  - curl -s -O https://bootstrap.pypa.io/get-pip.py
  - python get-pip.py
  - pip install -q -r requirements_dev.txt

after_script:
  - pip install codecov
  - make install-dev &> /dev/null
  - sv_detect_software_versions python -q -p ${CI_JOB_NAME} -o software_versions.json
  # - codecov --token=<>

stages:
  - quick-checks
  - build
  - test
  - validation
  - deploy
  - report
  - cleanup

linters:
  image: python:3.5
  stage: quick-checks
  script:
    - make lint
    # - tox -e linters

build:
  stage: build
  script:
    - make install-dev
    - make dist
  artifacts:
    paths:
    - dist/
    - software_versions.json
    expire_in: 1 month

failed:build:
  stage: build
  script:
    - exit 1
  allow_failure: true
  artifacts:
    paths:
      - software_versions.json
    when: always
    expire_in: 1 month

.test: &test_setup
  stage: test
  artifacts:
    paths:
      - software_versions.json
    when: always
    expire_in: 1 month

python2:
  <<: *test_setup
  image: python:2.7
  script: tox -e py27

python36:
  <<: *test_setup
  image: python:3.6
  script: tox -e py36

python37:
  <<: *test_setup
  image: python:3.7
  script: tox -e py37

docs:
  <<: *test_setup
  script: make docs


validate-root-diff-1_2:
  image: python:3.7
  stage: validation
  script:
    - make install
    - mkdir -p output/validate
    - sv_root_diff tests/samples/test_1.root tests/samples/test_2.root --output-path=output/validate -r output/validate/root_comparison.json
  artifacts:
    paths:
      - output/validate
      - software_versions.json
    expire_in: 1 week

validate-root-diff-1_3:
  image: python:3.7
  stage: validation
  script:
    - make install
    - mkdir -p output/validate
    - sv_root_diff tests/samples/test_1.root tests/samples/test_3.root --output-path=output/validate -r output/validate/root_comparison.json
  artifacts:
    paths:
      - output/validate
      - software_versions.json
    expire_in: 1 week

validate:demo_report:
  image: python:3.7
  stage: validation
  script:
    - make install
    - sv_make_demo_report
    - test -f demo_report.md
  artifacts:
    paths:
      - demo_report.md
      - software_versions.json
    expire_in: 1 week

validate:metric_pipeline:
  image: python:3.7
  stage: validation
  script:
    - make install-dev
    - apt update && apt install stress
    - ./.ci/test_metric_pipeline.sh
    - sv_make_demo_report
    - test -f demo_report.md
  artifacts:
    paths:
      - demo_report.md
      - software_versions.json
      - output
    expire_in: 1 week

validate:metric_pipeline_ref:
  image: python:3.7
  stage: validation
  script:
    - make install-dev
    - apt update && apt install stress
    - ./.ci/test_metric_pipeline_ref.sh
    - sv_make_demo_report
    - test -f demo_report.md
  artifacts:
    paths:
      - demo_report.md
      - software_versions.json
      - output
    expire_in: 1 week

failed:validation:
  stage: validation
  script:
    - exit 1
  allow_failure: true
  artifacts:
    paths:
      - software_versions.json
    when: always
    expire_in: 1 month

deploy_pypi:
  stage: deploy
  script:
    - pip install -U twine setuptools
    - python setup.py check sdist bdist_wheel
    - twine upload dist/*
  only:
    - tags
  except:
    - branches
  after_script: []

report:
  stage: report
  when: always
  script:
    - make install
    - sv_make_report .ci/ci_report.yml -o ci_report.md
    - sv_submit_report_to_mr ci_report.md validation_report_*.md
  dependencies:
    - validate:metric_pipeline
  artifacts:
    paths:
      - "*.md"
      - "*.html"
      - "*.pdf"
      - output
    expire_in: 1 week
  after_script: []

cleanup_pypirc:
   stage: cleanup
   when: always   # this is important; run even if preceding stages failed.
   script:
    - rm -vf ~/.pypirc  # we don't want to leave these around, but GitLab may clean up anyway.
   after_script: []
   before_script: []
